<?xml version="1.0"?>
<configuration>
  
  <configSections>
    <section name="servicesToLoad" type="System.Configuration.AppSettingsSection, System.Configuration, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"/>
    <section name="UnityMapping" type="WcfAbstraction.TestTools.Unity.UnityMappingSection, WcfAbstraction"/>
  </configSections>  
  
  <appSettings>
    <add key="ServerName" value="localhost" />
    <add key="PortNumber" value="8000" />
  </appSettings>
  
  <UnityMapping>
    <!-- Inside server communication with existing services classes (non WCF): serviceA to serviceB internal communication -->
    <!--
     this section sets the services concrete implementation used to run the services inside server
    
     Concrete service implementation (Contracts" concreteTyp -> concrete implementation of the contract)
     <add value="WcfAbstraction.Server.Services.IUIConfigurationService, WcfAbstraction.Server.Contracts" Contracts" concreteType="WcfAbstraction.Server.Services.UIConfigurationService, WcfAbstraction.Server" />
     
     Mock implementation (mockType -> the type holding property implementing the concrete type)
     <add value="WcfAbstraction.Server.Services.IUIConfigurationService, WcfAbstraction.Server.Contracts" mockType="WcfAbstraction.Server.UnitTesting.UIConfigurationServiceMock, WcfAbstraction.Server.UnitTesting" /
    -->
    <add contractType="WcfAbstraction.Server.Services.ITestService, WcfAbstraction.Server.Contracts" 
         concreteType="WcfAbstraction.Server.Services.TestService, WcfAbstraction.Server" />
  </UnityMapping>
  
  <system.diagnostics>
    <sources>
      <source name="System.ServiceModel.MessageLogging" switchValue="Warning, ActivityTracing">
        <!--Enable the following section for debugging only-->
        <listeners>
          <add type="System.Diagnostics.DefaultTraceListener" name="Default">
            <filter type="" />
          </add>
          <add name="ServiceModelMessageLoggingListener">
            <filter type="" />
          </add>
        </listeners>
      </source>
      <source name="System.ServiceModel" switchValue="Warning, ActivityTracing" propagateActivity="true">
        <!--Enable the following section for debugging only-->
        <listeners>
          <add type="System.Diagnostics.DefaultTraceListener" name="Default">
            <filter type="" />
          </add>
          <add name="ServiceModelTraceListener">
            <filter type="" />
          </add>
        </listeners>
      </source>
    </sources>
    <sharedListeners>
      <add initializeData="App_messages.svclog" type="System.Diagnostics.XmlWriterTraceListener, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="ServiceModelMessageLoggingListener" traceOutputOptions="Timestamp">
        <filter type="" />
      </add>
      <add initializeData="App_tracelog.svclog" type="System.Diagnostics.XmlWriterTraceListener, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="ServiceModelTraceListener" traceOutputOptions="Timestamp">
        <filter type="" />
      </add>
    </sharedListeners>
    <trace autoflush="true" />
  </system.diagnostics>
  
  <servicesToLoad>
    <!-- Set the services to load by WcfAbstraction -->
    <add key="WcfAbstraction.Server.Services.TestService" 
         value="WcfAbstraction.Server.Services.TestService, WcfAbstraction.Server" />
  </servicesToLoad>
  
  <system.serviceModel>
    <!-- WCF end point configuration: For each ServiceToLoad we need to configure the end point and binding in order for the service to open -->
    <services>
      <service behaviorConfiguration="DefaultBehavior" name="WcfAbstraction.Server.Services.TestService">        
        <endpoint address="net.tcp://localhost:8000/TestService" 
                  binding="netTcpBinding" 
                  bindingConfiguration="DefaultNetTcpBinding" 
                  contract="WcfAbstraction.Server.Services.ITestService" />
      </service>
    </services>
    <diagnostics wmiProviderEnabled="true"> <!-- performanceCounters="ServiceOnly" set this attribute only to diagnost with perform.exe -->
      <messageLogging
           logEntireMessage="true"
           logMalformedMessages="true"
           logMessagesAtServiceLevel="true"
           logMessagesAtTransportLevel="true"
     />
    </diagnostics>
    <bindings>
      <netTcpBinding>

        <!-- The default binding used. (configuration explained in comments within the binding)-->
        <binding name="DefaultNetTcpBinding"
                 closeTimeout="00:00:30"
                 openTimeout="00:00:30"
                 receiveTimeout="infinite"
                 sendTimeout="00:20:00"
                 maxReceivedMessageSize="73400320">
          <!--
            sendTimeout -     (client & server) SendTimeout is used to initialize the OperationTimeout, which governs the whole interaction for sending a 
                              message (including receiving a reply message in a request-reply case). This timeout also applies when 
                              sending reply messages from a CallbackContract method.
                          
            receiveTimeout -  (server) How long to wait before faulting the communication channel when no application message 
                              is received (interval of time that a connection can remain inactive). 
                              This setting should be set on the server side binding. This behavior ensures that clients cannot 
                              hold on to server resources for arbitrary long periods. The client can call the same (pooling) proxy 
                              simultaneously (from several threads at the same time) with no hang risk at server side.
                             
                              "infinite" is aprox 24 days (this is the largest value WCF can recieve "24.20:31:23.6470000")
          
                              When using "reliableSession" the "InactivityTimeout" should also be satisfied to keep the connection alive. 
                              If either of these inactivity timers goes off, then the connection is dropped.
                             
                              (the Client doesn't know what the ReceiveTimeout is on the Service, when it faults because of 
                              ReceiveTimeout being exceeded, all it can tell you is what the local timeouts were.  Just in 
                              case this timeout was caused by something local to the Client, the exception gives you what 
                              the SendTimeout was.)

            openTimeout -     (client & server) the time it takes to open a connection to the server
            closeTimeout -    (client & server) the time it takes to close the response from the server (response is disposed)
            
            maxReceivedMessageSize="73400320" is 70MB
          -->
          
          <!--<security mode="None"/>-->

          <readerQuotas maxDepth="500" maxStringContentLength="5242880" maxArrayLength="73400320"/>
          <!--
            maxArrayLength="73400320" is 70MB (maximum value is 2147483647)
            maxStringContentLength="5242880" is 5MB (maximum value is 2147483647)
          -->
          
          <reliableSession inactivityTimeout="01:00:00" enabled="false"/> 
          <!--Default value for "enabled" is false-->
        </binding>

        <!-- This Binding is for long operation (more than 20 minutes). In the future this binding will become obsolete when all long operations will be converted to async jobs-->
        <binding name="InfiniteNetTcpBinding"
                 closeTimeout="00:00:30"
                 openTimeout="00:00:30"
                 receiveTimeout="infinite"
                 sendTimeout="infinite"
                 maxReceivedMessageSize="73400320">
          <!-- The send timeout is infinit while all other timeouts are kept as usual -->

          <!--The below settings should be the same as "DefaultNetTcpBinding" since this binding is just for increasing the timeouts-->
          <security mode="None"/>
          <readerQuotas maxDepth="500" maxStringContentLength="5242880" maxArrayLength="73400320"/>
          <reliableSession inactivityTimeout="01:00:00" enabled="false"/>
        </binding>
        
        <!-- this Binding is for the basis infra service only and is not to be changed ever all through the product versions-->
        <binding name="BasisInfraNetTcpBinding"
                 closeTimeout="00:00:15"
                 openTimeout="00:00:15"
                 receiveTimeout="00:01:00"
                 sendTimeout="00:01:00"
                 maxReceivedMessageSize="1048576">
          <!-- These timeout configuration are ment to be low since we dont want to hung for a response while checking communication and alike -->

          <security mode="None"/>
          <!-- Security is off for this service -->

          <readerQuotas maxDepth="500" maxStringContentLength="1048576" maxArrayLength="1048576"/>
          <!-- This service intentation is for small "ping" communication only -->

          <reliableSession inactivityTimeout="00:02:00" enabled="false"/>
          <!-- no session -->
        </binding>
        
      </netTcpBinding>
    </bindings>
    <behaviors>
      <serviceBehaviors>
        <behavior name="DefaultBehavior">
          <serviceDebug includeExceptionDetailInFaults="true"/>
          <dataContractSerializer maxItemsInObjectGraph="500000"/>
          <serviceTimeouts transactionTimeout="00:15:00"/>
          <serviceThrottling maxConcurrentCalls="100" maxConcurrentSessions="50" maxConcurrentInstances="100"/>
            <!--
              maxConcurrentInstances - The maximum number of InstanceContext objects in the service at one time
              maxConcurrentSessions - The maximum number of sessions a service host accepts (we currently dont use session, we instantiate per call)
              maxConcurrentCalls - The upper limit of active messages in the service. The default is 16 times the processor count.
            -->
        </behavior>
      </serviceBehaviors>
    </behaviors>
    <extensions>
      <behaviorExtensions>
        <!--
          any behavior extension added here must be set with fully qualified name (so we prefer to do it in code instead)
          (http://connect.microsoft.com/VisualStudio/feedback/details/300140/wcf-fails-to-add-behaviorextensionelement-if-type-attribute-is-short)
        -->
      </behaviorExtensions>
    </extensions>
  </system.serviceModel>
  
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="System.Xml.Linq" publicKeyToken="B77A5C561934E089" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-3.5.0.0" newVersion="3.5.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Core" publicKeyToken="B77A5C561934E089" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-3.5.0.0" newVersion="3.5.0.0" />
      </dependentAssembly>
      <probing privatePath="CoreSDK" />
    </assemblyBinding>
  </runtime>
  
  <startup useLegacyV2RuntimeActivationPolicy="true">
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.0"/>
  </startup>
  
</configuration>
